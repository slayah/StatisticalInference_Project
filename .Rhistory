dir()
library(rpart)
data("mtcars")
str(mtcars)
head(mtcars)
names(mtcars)
mu0=30
mua=32
n=16
sigma=4
z<-qnorm(1-alpha)
z<-qnorm(1-alpha)
alpha=0.05
z<-qnorm(1-alpha)
z
pnorm(mu0 + z*sigma/sqrt(n), mean=mu0, sd=sigma/sqrt(n), lower.tail = FALSE)
pnorm(mu0 + z*sigma/sqrt(n), mean=mua, sd=sigma/sqrt(n), lower.tail = FALSE)
library(manipulate)
myplot<-function(sigma,mua,n,alpha){
g = ggplot(data.frame(mu=c(27,36)), aes(x=mu))
g = g + stat_funtion(fun=dnorm, geom="line",
args=list(mean=mu0,sd=sigma/sqrt(n)),
size=2, col=red)
g = g + stat_funtion(fun=dnorm, geom="line",
args=list(mean=mu0,sd=sigma/sqrt(n)),
size=2, col=blue)
xitc = mu0 + qnorm(1-alpha)*sigma/sqrt(n)
g = g + geom_vline(xintercept-xitc, size=3)
g
}
install.packages("manipulate")
library(manipulate)
install.packages("manipulate")
library(manipulate)
myplot<-function(sigma,mua,n,alpha){
g = ggplot(data.frame(mu=c(27,36)), aes(x=mu))
g = g + stat_funtion(fun=dnorm, geom="line",
args=list(mean=mu0,sd=sigma/sqrt(n)),
size=2, col=red)
g = g + stat_funtion(fun=dnorm, geom="line",
args=list(mean=mu0,sd=sigma/sqrt(n)),
size=2, col=blue)
xitc = mu0 + qnorm(1-alpha)*sigma/sqrt(n)
g = g + geom_vline(xintercept-xitc, size=3)
g
}
mu0=30
mua=32
n=16
sigma=4
alpha=0.05
manipulate(
myplot(sigma, mua, n, alpha),
sigma = slider(1,10,step=1,initial=4),
mua = slider(30,35,step=1,initial=32),
n = slider(1,50,step=1,initial=16),
alpha = slider(0.01,0.1,step=0.01,initial=0.05)
)
library(ggplot2)
library(ggplot)
install.packages("ggplot")
install.packages("ggplot2")
library(ggplot2)
myplot<-function(sigma,mua,n,alpha){
g = ggplot(data.frame(mu=c(27,36)), aes(x=mu))
g = g + stat_funtion(fun=dnorm, geom="line",
args=list(mean=mu0,sd=sigma/sqrt(n)),
size=2, col=red)
g = g + stat_funtion(fun=dnorm, geom="line",
args=list(mean=mu0,sd=sigma/sqrt(n)),
size=2, col=blue)
xitc = mu0 + qnorm(1-alpha)*sigma/sqrt(n)
g = g + geom_vline(xintercept-xitc, size=3)
g
}
manipulate(
myplot(sigma, mua, n, alpha),
sigma = slider(1,10,step=1,initial=4),
mua = slider(30,35,step=1,initial=32),
n = slider(1,50,step=1,initial=16),
alpha = slider(0.01,0.1,step=0.01,initial=0.05)
)
library(ggplot2)
library(manipulate)
myplot<-function(sigma,mua,n,alpha){
g = ggplot(data.frame(mu=c(27,36)), aes(x=mu))
g = g + stat_funtion(fun=dnorm, geom="line",
args=list(mean=mu0,sd=sigma/sqrt(n)),
size=2, col=red)
g = g + stat_funtion(fun=dnorm, geom="line",
args=list(mean=mu0,sd=sigma/sqrt(n)),
size=2, col=blue)
xitc = mu0 + qnorm(1-alpha)*sigma/sqrt(n)
g = g + geom_vline(xintercept-xitc, size=3)
g
}
manipulate(
myplot(sigma, mua, n, alpha),
sigma = slider(1,10,step=1,initial=4),
mua = slider(30,35,step=1,initial=32),
n = slider(1,50,step=1,initial=16),
alpha = slider(0.01,0.1,step=0.01,initial=0.05)
)
power.t.test(n=16,delta = 2,sd=4, type = "one.sample", alt = "one.sided")$power
power.t.test(n=16,delta = 100,sd=200, type = "one.sample", alt = "one.sided")$power
power.t.test(n=16,delta = 2/4,sd=1, type = "one.sample", alt = "one.sided")$power
power.t.test(power=0.8,delta = 2/4,sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power=0.8,delta = 2,sd=4, type = "one.sample", alt = "one.sided")$n
power.t.test(power=0.8,delta = 100,sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(power=0.8,n=27,sd=200, type = "one.sample", alt = "one.sided")$delta
power.t.test(power=0.8,n=26.14,sd=200, type = "one.sample", alt = "one.sided")$delta
set.seed(1010093)
pValues <- rep(NA,1000)
set.seed(1010093)
pValues <- rep(NA,1000)
for(i in 1:1000){
y<-rnorm(20)
x<-rnorm(20)
pValues[i]<-summary(lm(y~x))$coeff[2,4]
}
sum(pValues<0.05)
sum(p.adjust(pValues,method = "bonferroni") < 0.05)
sum(p.adjust(pValues,method = "BH") < 0.05)
set.seed(1010093)
pValues <- rep(NA,1000)
for(i in 1:1000){
x<-rnorm(20)
if(i <= 500){y<-rnorm(20)}else {y<-rnorm(20,mean = 2*x)}
pValues[i]<-summary(lm(y~x))$coeff[2,4]
}
trueStatus<-rep(c("zero","not zero"),each=500)
table(pValues<0.05,trueStatus)
#Controlling FWER:
sum(p.adjust(pValues,method = "bonferroni") < 0.05)
table(p.adjust(pValues,method = "bonferroni") < 0.05,trueStatus)
#Controlling FDR:
sum(p.adjust(pValues,method = "BH") < 0.05)
table(pValues<0.05,trueStatus)
table(p.adjust(pValues,method = "BH") < 0.05,trueStatus)
par(mfrow=c(1,2))
plot(pValues,p.adjust(pValues,method = "bonferroni"),pch=19)
plot(pValues,p.adjust(pValues,method = "BH"),pch=19)
lambda=0.2
mean=1/lambda
sd=1/lambda
n=40
nsim=1000
lambda=0.2
mean_exp=1/lambda
sd_exp=1/lambda
n=40
nsim=1000
mns=NULL
for(i in 1:nsim) mns=c(mns,mean(rexp(n,lambda)))
hist(mns)
sample_means=NULL
for(i in 1:nsim) mns=c(sample_means,mean(rexp(n,lambda)))
hist(sample_means)
sample_means=NULL
for(i in 1:nsim) sample_means=c(sample_means,mean(rexp(n,lambda)))
hist(sample_means)
library(ggplot2)
lambda=0.2
mean_exp=1/lambda
sd_exp=1/lambda
n=40
nsim=1000
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
lambda=0.2
mean_exp=1/lambda
sd_exp=1/lambda
n=40
nsim=1000
library(ggplot2)
lambda=0.2
mean_exp=1/lambda
sd_exp=1/lambda
n=40
nsim=1000
sample_means=NULL
for(i in 1:nsim) sample_means=c(sample_means,mean(rexp(n,lambda)))
hist(sample_means,col = "lightblue")
ggplot(data = sample_means, aes(x = x)) + geom_histogram(aes(y = ..density..), fill = I("darkolivegreen3"),
binwidth = 0.2, color = I("black")) + stat_function(fun = dnorm, arg = list(mean = 5,
library(ggplot2)
lambda=0.2
mean_exp=1/lambda
sd_exp=1/lambda
n=40
nsim=1000
hist(sample_means,col = "blue")
hist(sample_means,col = "blue",breaks=20)
mean(sample_means)
theoretical_mean=1/lambda
theoretical_sd=1/lambda
theoretical_mean
actual_mean<-mean(sample_means)
abline(v=actual_mean, col="red")
library(ggplot2)
lambda=0.2
theoretical_mean=1/lambda
theoretical_sd=1/lambda
n=40
nsim=1000
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
lambda=0.2
theoretical_mean=1/lambda
theoretical_sd=1/lambda
n=40
nsim=1000
sample_means=NULL
for(i in 1:nsim) sample_means=c(sample_means,mean(rexp(n,lambda)))
hist(sample_means,col = "blue",breaks=20)
actual_mean<-mean(sample_means)
abline(v=actual_mean, col="red")
theoretical_mean
sample_variance=NULL
for(i in 1:nsim) sample_variance=c(sample_variance,sd(rexp(n,lambda))^2)
sample_variance
hist(sample_variance,col = "green",breaks=20)
actual_variance<-sd(sample_variance)^2
abline(v=actual_variance, col="red")
actual_variance
print(theoretical_sd^2)
hist(sample_variance,col = "green",breaks=0.2)
hist(sample_variance,col = "green")
sample_variance=NULL
for(i in 1:nsim) sample_variance=c(sample_variance,(sd(rexp(n,lambda))/sqrt(n))^2)
hist(sample_variance,col = "green")
actual_variance<-(sd(sample_variance)/sqrt(n))^2
abline(v=actual_variance, col="red")
actual_variance
sample_sd<-sd(sample_means)
sample_sd
sample_means=NULL
for(i in 1:nsim) sample_means=c(sample_means,mean(rexp(n,lambda)))
#distribution of sample means
hist(sample_means,col = "blue",breaks=20)
actual_mean<-mean(sample_means)
abline(v=actual_mean, col="red")
print(theoretical_mean)
sample_sd<-sd(sample_means)
sample_sd
print(sample_sd)
sample_variance<-sample_sd^2
print(sample_variance)
theoretical_mean=1/lambda
theoretical_sd=1/lambda
library(ggplot2)
lambda=0.2
n=40
theoretical_mean=1/lambda
theoretical_sd=(1/lambda)/sqrt(n)
nsim=1000
set.seed(820)
sample_means=NULL
for(i in 1:nsim) sample_means=c(sample_means,mean(rexp(n,lambda)))
#distribution of sample means
hist(sample_means,col = "blue",breaks=20)
actual_mean<-mean(sample_means)
abline(v=actual_mean, col="red")
print(theoretical_mean)
sample_sd<-sd(sample_means)
print(sample_sd)
sample_variance<-sample_sd^2
print(sample_variance)
theoretical_variance<-theoretical_sd^2
print(theoretical_variance)
library(ggplot2)
lambda=0.2
n=40
theoretical_mean=1/lambda
theoretical_sd=(1/lambda)/sqrt(n)
nsim=1000
set.seed(820)
exp_means=NULL
for(i in 1:nsim) sample_means=c(exp_means,mean(rexp(n,lambda)))
#distribution of sample means
hist(exp_means,col = "blue",breaks=20)
actual_mean<-mean(exp_means)
abline(v=actual_mean, col="red")
print(theoretical_mean)
sample_sd<-sd(exp_means)
print(sample_sd)
sample_variance<-sample_sd^2
print(sample_variance)
print(theoretical_sd)
theoretical_variance<-theoretical_sd^2
print(theoretical_variance)
hist(exp_means, prob=TRUE, col="green", main="mean distribution for rexp()", breaks=20)
lines(density(exp_means), lwd=3, col="blue")
library(ggplot2)
lambda=0.2
n=40
theoretical_mean=1/lambda
theoretical_sd=(1/lambda)/sqrt(n)
nsim=1000
set.seed(820)
exp_means=NULL
for(i in 1:nsim) sample_means=c(exp_means,mean(rexp(n,lambda)))
#distribution of sample means
hist(exp_means,col = "blue",breaks=20)
actual_mean<-mean(exp_means)
abline(v=actual_mean, col="red")
print(theoretical_mean)
sample_sd<-sd(exp_means)
print(sample_sd)
sample_variance<-sample_sd^2
print(sample_variance)
print(theoretical_sd)
theoretical_variance<-theoretical_sd^2
print(theoretical_variance)
hist(exp_means, prob=TRUE, col="green", main="mean distribution for rexp()", breaks=20)
lines(density(exp_means), lwd=3, col="blue")
hist(exp_means, prob=TRUE, col="green", main="mean distribution for rexp()", breaks=20)
exp_means<-as.numeric()
hist(exp_means, prob=TRUE, col="green", main="mean distribution for rexp()", breaks=20)
ggplot(data = exp_means, aes(x = x)) + geom_histogram(aes(y = ..density..), fill = I("darkolivegreen3"),
binwidth = 0.2, color = I("black"))
+ stat_function(fun = dnorm, arg = list(mean = actual_mean, sd = sd(exp_means)))
library(ggplot2)
ggplot(data = exp_means, aes(x = x)) + geom_histogram(aes(y = ..density..), fill = I("darkolivegreen3"),
binwidth = 0.2, color = I("black"))
+ stat_function(fun = dnorm, arg = list(mean = actual_mean, sd = sd(exp_means)))
means<-data.frame(x=exp_means)
means
exp_means
library(ggplot2)
lambda=0.2
n=40
theoretical_mean=1/lambda
theoretical_sd=(1/lambda)/sqrt(n)
nsim=1000
set.seed(820)
exp_means=NULL
for(i in 1:nsim) sample_means=c(exp_means,mean(rexp(n,lambda)))
exp_means=NULL
exp_means
library(ggplot2)
lambda=0.2
n=40
theoretical_mean=1/lambda
theoretical_sd=(1/lambda)/sqrt(n)
nsim=1000
set.seed(820)
exp_means=NULL
for(i in 1:nsim) exp_means=c(exp_means,mean(rexp(n,lambda)))
exp_means
#distribution of sample means
hist(exp_means,col = "blue",breaks=20)
actual_mean<-mean(exp_means)
abline(v=actual_mean, col="red")
print(theoretical_mean)
sample_sd<-sd(exp_means)
print(sample_sd)
sample_variance<-sample_sd^2
print(sample_variance)
print(theoretical_sd)
theoretical_variance<-theoretical_sd^2
print(theoretical_variance)
hist(exp_means, prob=TRUE, col="green", main="mean distribution for rexp()", breaks=20)
lines(density(exp_means), lwd=3, col="blue")
library(ggplot2)
lambda=0.2
n=40
theoretical_mean=1/lambda
theoretical_sd=(1/lambda)/sqrt(n)
nsim=1000
set.seed(820)
exp_means=NULL
for(i in 1:nsim) exp_means=c(exp_means,mean(rexp(n,lambda)))
#distribution of sample means
hist(exp_means,col = "blue",breaks=20)
actual_mean<-mean(exp_means)
abline(v=actual_mean, col="red")
print(theoretical_mean)
sample_sd<-sd(exp_means)
print(sample_sd)
sample_variance<-sample_sd^2
print(sample_variance)
print(theoretical_sd)
theoretical_variance<-theoretical_sd^2
print(theoretical_variance)
exp_means<-as.numeric()
hist(exp_means, prob=TRUE, col="green", main="mean distribution for rexp()", breaks=20)
lines(density(exp_means), lwd=3, col="blue")
library(ggplot2)
lambda=0.2
n=40
theoretical_mean=1/lambda
theoretical_sd=(1/lambda)/sqrt(n)
nsim=1000
set.seed(820)
exp_means=NULL
for(i in 1:nsim) exp_means=c(exp_means,mean(rexp(n,lambda)))
#distribution of sample means
hist(exp_means,col = "blue",breaks=20)
actual_mean<-mean(exp_means)
abline(v=actual_mean, col="red")
print(theoretical_mean)
sample_sd<-sd(exp_means)
print(sample_sd)
sample_variance<-sample_sd^2
print(sample_variance)
print(theoretical_sd)
theoretical_variance<-theoretical_sd^2
print(theoretical_variance)
#exp_means<-as.numeric()
hist(exp_means, prob=TRUE, col="green", main="mean distribution for rexp()", breaks=20)
lines(density(exp_means), lwd=3, col="blue")
data("ToothGrowth")
str(data)
tg=data("ToothGrowth")
str(tg)
str(ToothGrowth)
summary(ToothGrowth)
hist(ToothGrowth$supp)
as.numeric(ToothGrowth$supp)
hist(as.numeric(ToothGrowth$supp))
hist(as.numeric(ToothGrowth$dose))
ToothGrowth$dose
hist(as.numeric(ToothGrowth$len))
hist(as.numeric(ToothGrowth$len),col = "blue",breaks=20)
hist(as.numeric(ToothGrowth$len),col = "blue",breaks=10)
hist(as.numeric(ToothGrowth$len),col = "blue",breaks=20)
hist(as.numeric(ToothGrowth$len),col = "blue",breaks=15)
plot(len~dose,data = ToothGrowth)
plot(dose~len,data = ToothGrowth)
plot(dose~len,data = ToothGrowth,pch=19)
plot(dose~len,data = ToothGrowth,pch=19,col=dose)
plot(dose~len,data = ToothGrowth,pch=19)
plot(supp~len,data = ToothGrowth,pch=19)
plot(as.numeric(supp)~len,data = ToothGrowth,pch=19)
str(ToothGrowth)
boxplot(ToothGrowth$len)
hist(as.numeric(ToothGrowth$len),col = "blue",breaks=15)
lines(density(ToothGrowth$len), lwd=3, col="blue")
lines(density(ToothGrowth$len), lwd=3, col="red")
head(ToothGrowth)
boxplot(len~supp,data = ToothGrowth)
boxplot(len~supp,data = ToothGrowth,col=supp)
t.test(len ~ supp, ToothGrowth[ToothGrowth$dose == .5, ])
t.test(len ~ supp, ToothGrowth[ToothGrowth$dose == 1, ])
t.test(len ~ supp, ToothGrowth[ToothGrowth$dose == 2, ])
unique(ToothGrowth$supp)
unique(ToothGrowth$dose)
t.test(len ~ dose, ToothGrowth[ToothGrowth$supp == "VC", ])
boxplot(len~supp,data = ToothGrowth,col="red")
library(UsingR)
data("father.son")
data("father.son")
x<-father.son$sheight
n<-length(x)
B<-10000
resamples<-matrix(sample(x,n*B,replace = TRUE),B,n)
resampledMedians<-apply(resamples,1,median)
boxplot(len~dose,data = ToothGrowth,col="pink")
install.packages("pdflatex")
install.packages("rmarkdown")
install.packages("rmarkdown")
data("ToothGrowth")
str(ToothGrowth)
head(ToothGrowth)
summary(ToothGrowth)
t.test(len ~ supp, ToothGrowth[ToothGrowth$dose == .5, ])
install.packages(upquote)
install.packages("upquote")
library(ggplot2)
lambda=0.2
n=40
theoretical_mean=1/lambda
theoretical_sd=(1/lambda)/sqrt(n)
nsim=1000
set.seed(820)
exp_means=NULL
for(i in 1:nsim) exp_means=c(exp_means,mean(rexp(n,lambda)))
#distribution of sample means
hist(exp_means,col = "blue",breaks=20)
actual_mean<-mean(exp_means)
abline(v=actual_mean, col="red")
print(theoretical_mean)
sample_sd<-sd(exp_means)
print(sample_sd)
sample_variance<-sample_sd^2
print(sample_variance)
print(theoretical_sd)
theoretical_variance<-theoretical_sd^2
print(theoretical_variance)
hist(exp_means, prob=TRUE, col="green", main="mean distribution for rexp()", breaks=20)
lines(density(exp_means), lwd=3, col="blue")
l<-seq(4,6, by=0.01)
coverage <- function(l){
means<-rowMeans(matrix(rexp(n*nsim, rate = 0.2),nsim,n))
ll<-means - qnorm(0.975)*sqrt(1/lambda**2/n)
ul<-means + qnorm(0.975)*sqrt(1/lambda**2/n)
mean(ll<l & ul>l)
}
sapply(l,coverage)
l_coverages<-sapply(l,coverage)
l_coverages<-sapply(l,coverage)
qplot(l, l_coverages) + geom_hline(yintercept=0.95)
t.test(len ~ supp, ToothGrowth[ToothGrowth$dose == .5, ])
t.test(len ~ supp, ToothGrowth[ToothGrowth$dose == 1, ])
render("part1.Rmd", "pdf_document")
setwd("C:/Users/smgambhi/Downloads/Data Science Specialization/6.Statistical Inference/StatisticalInference_Project")
library(rmarkdown)
install.packages("rmarkdown")
